{"version":3,"sources":["UserContext.js","GraphQL/Queries.js","Pokemon/CSS/Style.js","Pokemon/Pokemons.jsx","Pokemon/MyPokemons.jsx","Navigation/Menu.jsx","App.js","Services/Client.js","reportWebVitals.js","index.js"],"names":["UserContext","createContext","GET_ALL_POKEMONS","gql","GET_DETAIL_POKEMON","divData","css","pData","gqlVariables","limit","offset","Pokemon","useQuery","variables","loading","error","data","className","cx","pokemons","results","map","value","i","to","name","DetailPokemon","useParams","useContext","setValue","nameVariables","src","pokemon","sprites","front_default","alt","onClick","PokemonsData","exact","path","children","MyPokemon","val","NavigationMenu","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","App","useState","Provider","component","client","ApolloClient","cache","InMemoryCache","uri","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"wMAEaA,G,MAAcC,wBAAc,O,+BCA5BC,EAAmBC,cAAH,uSAiBhBC,EAAqBD,cAAH,kT,QCdlBE,EAAUC,YAAH,sHAQPC,EAAQD,YAAH,2NAVC,UADL,S,OCeRE,EAAe,CACjBC,MAAO,GACPC,OAAQ,GAkBZ,SAASC,IAAW,IAAD,EACiBC,mBAASV,EAAkB,CACvDW,UAAWL,IADRM,EADQ,EACRA,QAASC,EADD,EACCA,MAAOC,EADR,EACQA,KAIvB,OAAIF,EAAgB,2CAChBC,EAAc,yCAGd,qBAAKE,UAAWC,YAAGb,GAAnB,SACMW,GAAQA,EAAKG,SAASC,QAAQC,KAAI,SAASC,EAAOC,GAChD,OACA,8BACI,cAAC,IAAD,CAAMC,GAAIF,EAAMG,KAAhB,SAAsB,mBAAGR,UAAWC,YAAGX,GAAjB,SAA2Be,EAAMG,UADjDF,QAS1B,SAASG,IAAiB,IAChBD,EAASE,cAATF,KADe,EAEKG,qBAAW5B,GAA9BsB,EAFc,EAEdA,MAAOO,EAFO,EAEPA,SAERC,EAAgB,CAClBL,KAAMA,GALW,EAQWb,mBAASR,EAAoB,CACzDS,UAAWiB,IADRhB,EARc,EAQdA,QAASC,EARK,EAQLA,MAAOC,EARF,EAQEA,KAIvB,OAAIF,EAAgB,2CAChBC,EAAc,yCAGhB,gCACE,sCAASU,KACL,mDAAuBH,KACvB,qBAAKS,IAAKf,EAAKgB,QAAQC,QAAQC,cAAeC,IAAI,KAClD,wBAAQC,QAAS,kBAAMP,EAASP,EAAQ,IAAxC,kCAOGe,MA/Df,WACI,OACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,SAAU,cAAC7B,EAAD,MAChC,eAAC,IAAD,CAAO4B,KAAK,SAAZ,UACI,cAAC,IAAD,CAAMf,GAAG,IAAT,SAAa,uCACb,cAACE,EAAD,aCrBdlB,EAAe,CACjBC,MAAO,EACPC,OAAQ,GAyCG+B,MAtCf,WAAsB,IAAD,EACe7B,mBAASV,EAAkB,CACvDW,UAAWL,IADRM,EADU,EACVA,QAASC,EADC,EACDA,MAAOC,EADN,EACMA,KADN,EAcSY,qBAAW5B,GAA9BsB,EAdU,EAcVA,MAEP,OAhBiB,EAcHO,SAEVf,EAAgB,2CAChBC,EAAc,yCAGd,wCAEMC,GAAQA,EAAKG,SAASC,QAAQC,KAAI,SAASqB,EAAKnB,GAC9C,OACA,gCACI,4BAAKmB,EAAIjB,OACT,4BAAKH,MAFCC,UCbXoB,EArBQ,WACnB,OACI,sBAAK1B,UAAU,gDAAf,UACA,cAAC,IAAD,CAAMA,UAAU,eAAeO,GAAG,IAAlC,qBACA,wBAAQP,UAAU,iBAAiB2B,KAAK,SAASC,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,oBAA5J,SACI,sBAAMhC,UAAU,0BAEpB,qBAAKA,UAAU,2BAA2BiC,GAAG,YAA7C,SACI,qBAAIjC,UAAU,aAAd,UACA,oBAAIA,UAAU,kBAAd,SACI,eAAC,IAAD,CAAMA,UAAU,WAAWO,GAAG,IAA9B,kBAAuC,sBAAMP,UAAU,UAAhB,4BAE3C,oBAAIA,UAAU,WAAd,SACI,cAAC,IAAD,CAAMA,UAAU,WAAWO,GAAG,eAA9B,mCCYD2B,MAdf,WAAgB,IAAD,EACaC,mBAAS,iBADtB,mBACN9B,EADM,KACCO,EADD,KAGb,OACI,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAAC7B,EAAYqD,SAAb,CAAsB/B,MAAO,CAACA,QAAOO,YAArC,UACI,cAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,IAAIe,UAAWjB,IACjC,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,eAAee,UAAWb,WCZzCc,EALA,IAAIC,eAAa,CAC5BC,MAAO,IAAIC,gBACXC,IAJc,mDCSHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCIdQ,IAASC,OACP,cAAC,IAAD,UACE,cAAC,iBAAD,CAAgBf,OAAQA,EAAxB,SACE,cAAC,EAAD,QAGJgB,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.39de5cb1.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport const UserContext = createContext(null);","import { gql } from '@apollo/client';\n\nexport const GET_ALL_POKEMONS = gql`\nquery pokemons($limit: Int, $offset: Int) {\n    pokemons(limit: $limit, offset: $offset) {\n        count\n        next\n        previous\n        status\n        message\n        results {\n            url\n            name\n            image\n        }\n    }\n}\n`;\n\nexport const GET_DETAIL_POKEMON = gql`\nquery pokemon($name: String!) {\n    pokemon(name: $name) {\n      id\n      name\n      sprites {\n        front_default\n      }\n      moves {\n        move {\n          name\n        }\n      }\n      types {\n        type {\n          name\n        }\n      }\n    }\n  }\n`;","import { css } from '@emotion/css'\n\nconst color = 'white'\nconst light_gray = '#bababa'\n\nexport const divData = css`\n    width: 50%;\n    padding: 15px 20px;\n    a {\n        text-decoration: none;\n    }\n`\n\nexport const pData = css`\n    padding: 10px;\n    color: white;\n    background-color: gray;\n    font-size: 18px;\n    border-radius: 4px;\n    box-shadow: 2px 3px 8px ${light_gray};\n    &:hover {\n        color: ${color};\n    }\n`","import React, { useState, useEffect, useContext } from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useParams\n  } from \"react-router-dom\";\nimport { useQuery } from '@apollo/client';\nimport { \n    GET_ALL_POKEMONS, \n    GET_DETAIL_POKEMON \n} from '../GraphQL/Queries';\nimport { cx } from '@emotion/css';\nimport { pData, divData } from './CSS/Style';\nimport { UserContext } from '../UserContext.js';\n\nconst gqlVariables = {\n    limit: 10,\n    offset: 0,\n};\n\nfunction PokemonsData() {\n    return (  \n        <Router> \n            <Switch>\n                <Route exact path=\"/\" children={<Pokemon />} />\n                <Route path=\"/:name\">\n                    <Link to=\"/\"><p>Back</p></Link>\n                    <DetailPokemon />\n                </Route>\n            </Switch>\n        </Router>           \n    );\n}\n\n\nfunction Pokemon() {  \n    const {loading, error, data}  = useQuery(GET_ALL_POKEMONS, {\n        variables: gqlVariables,\n    });\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    return (\n        <div className={cx(divData)}>\n            { data && data.pokemons.results.map(function(value, i) {\n                return (\n                <div key={i}>\n                    <Link to={value.name}><p className={cx(pData)}>{ value.name }</p></Link>\n                </div>\n                );\n            })}\n        </div>  \n    );\n}\n\nfunction DetailPokemon() {\n    let { name } = useParams();    \n    const {value, setValue} = useContext(UserContext);\n\n    const nameVariables = {\n        name: name,\n    };\n\n    const {loading, error, data}  = useQuery(GET_DETAIL_POKEMON, {\n        variables: nameVariables,\n    });\n    \n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;        \n  \n    return (\n      <div>\n        <h3>ID: {name}</h3>\n            <p>Nilainya adalah : { value }</p>            \n            <img src={data.pokemon.sprites.front_default} alt=\"\"/>\n            <button onClick={() => setValue(value + 1)}>Catch The Pokemon</button>\n            {/* <button>Catch The Pokemon</button> */}\n      </div>\n    );\n}\n  \n\nexport default PokemonsData;","\nimport React, { useState, useEffect, useContext } from 'react';\n\n\nimport { useQuery } from '@apollo/client';\nimport { GET_ALL_POKEMONS } from '../GraphQL/Queries';\nimport { UserContext } from '../UserContext.js';\n\nconst gqlVariables = {\n    limit: 2,\n    offset: 0,\n};\n\nfunction MyPokemon() {\n    const {loading, error, data}  = useQuery(GET_ALL_POKEMONS, {\n        variables: gqlVariables,\n    });\n\n    // const [count, setCount] = useState(0);\n    // useEffect(() => {\n    //     document.title = `Title Change ${ count }`\n    //     return () => {\n    //         document.title = `Hello World`\n    //     };\n    // });\n\n\n    const {value, setValue} = useContext(UserContext);\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n  \n    return (             \n        <div>\n        Hello\n            { data && data.pokemons.results.map(function(val, i) {\n                return (\n                <div key={i}>\n                    <p>{ val.name }</p>\n                    <p>{ value }</p>\n                    {/* <div>\n                        <p>Tambah adalah : { count }</p>\n                        <button onClick={() => setCount(count + 1)}>Coba Tambah</button>\n                    </div> */}\n                </div>\n                );\n            })}\n        </div>    \n    );\n}\n\nexport default MyPokemon;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NavigationMenu = () => {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <Link className=\"navbar-brand\" to=\"/\">PokeApp</Link>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul className=\"navbar-nav\">\n            <li className=\"nav-item active\">\n                <Link className=\"nav-link\" to=\"/\">Home <span className=\"sr-only\">(current)</span></Link>\n            </li>\n            <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/my-pokemons\">MyPokemons</Link>\n            </li>\n            </ul>\n        </div>\n        </nav>\n    );\n};\n\nexport default NavigationMenu;","import React, { useState, useEffect } from 'react';\nimport \"./App.css\";\nimport { UserContext } from './UserContext'\n\nimport PokemonsData from './Pokemon/Pokemons'\nimport MyPokemon from './Pokemon/MyPokemons'\nimport NavigationMenu from './Navigation/Menu'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  const [value, setValue] = useState('Hello Pokemon');\n\n  return (\n      <Router>\n        <NavigationMenu />\n        <UserContext.Provider value={{value, setValue}}>\n            <Route exact path=\"/\" component={PokemonsData} />\n            <Route exact path=\"/my-pokemons\" component={MyPokemon} />           \n        </UserContext.Provider>\n      </Router>\n    );  \n};\n\nexport default App;","\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst stringURL = 'https://graphql-pokeapi.vercel.app/api/graphql'\n\nconst client = new ApolloClient({\n    cache: new InMemoryCache(),\n    uri: stringURL\n});\n\nexport default client;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { ApolloProvider } from '@apollo/client'\nimport { BrowserRouter } from 'react-router-dom';\nimport client from './Services/Client'\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>      \n      <App />\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}